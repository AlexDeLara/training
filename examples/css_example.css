/* This is a class */
.classExample1, .classExample2 {
    color: blue;
}

/* This is ID formatting */
#idName {
    float: right;
    margin: 10px 20px; /* The first value is for top-bottom and the second one left-right */
}

/* This formats a specific HTML tag */
h1 {
    text-align: center;
    color: #3f3f3f;
    text-decoration: underline;
}

/* Compund CSS. Only the las nested element is affected */
ul li {
    color: aqua;
}

/* Attribute examples */
div {
    width: 80%; /* Can be set in % or px */
    max-width: 500px; /* For very large screens, the width is maxed to this value */
    background-color: burlywood;
    margin-left: auto;  /* When both are set to auto, the element is centered */
    margin-right: auto;
    font-family: Impact, serif; /* Second font is fallback font */
    font-weight: 800; /* Font boldness */
    letter-spacing: 0.15px; /* Horizontal letter spacing */
    float: right; /* Set element to the left or right of element */
    clear: right /* When an element is below another element with a float:right, it clears this property and visually places it below */
  }

/* Adds a background image to the entire body */
body {
    background-image: url(https://cdn.freecodecamp.org/curriculum/css-cafe/beans.jpg)
}

/* Makes all the p items nested in the .item class behave as inline elements instead of block elements */
.item p {
    display: inline-block;
    background-color: rgb(0,0,255);
    background-color: #0000FFCC; /* Red, Green, Blue, Alpha Channel  */
    background-color: hsla(240, 100%, 50%, 0.8); /* Hue, %Saturation, %Lightness, Alpha Channel  */

    background-color: rgb(255,0,0);
    background-color: #FF0000;

    background-color: rgb(0,255,0);
    background-color: #00FF00;
}

/* Formats visited links */
a:visited {
    color: grey;
}

/* Formats hovered links */
a:hover {
    color: red;
}

/* Formats active links */
a:active {
    color: white;
}

/* Gradients */
.red {                         /* Direction, colo1 stop1, color2 stop2, ... */
    background: linear-gradient(180deg, rgb(122, 74, 14) 0%, rgb(245, 62, 113) 50%, rgb(162, 27, 27) 100%);
    opacity: 0.5;
    color: rgba(255, 255, 255, 50%); /* Las value is alpha-channel or how transparent it is */
    border-left: 30px double red;
    border-right: 10px solid black; /* Width style color */
    box-shadow: 5px 5px 5px 5px red; /* Offset X, offset Y, blur radius, spread radius, color */
  }

.relative {
    height: 100vh; /* 100% of device viewport hegiht */
    height: 100vw; /* 100% of device viewport width */

    width: 40vw; /* 40% of device viewport width */
    width: 40vh; /* 40% of device viewport height */

    margin-left: 10em; /* Relative to font size, 10 times the font size */
    font-size: 16px /* 1em = 16px */
}

html {
    font-size: 100%; /* 100% = 16px */
}

h1 {
    /* Root EM */
    font-size: 2.197rem; /* 2.197 × 16px = 35px */
    margin-top: 1.25rem; /* 1.25rem = 20px, ya que 1.25 × 16 = 20  */
    margin-bottom: 1.25rem;
    padding: calc(1.25rem + 2px); /* Calculations based on other CSS elements */
}

h1:last-of-type { /* Last of that element type in html */
    font-size: 3rem;
}

.inline {
    width: unset; /* Removes this attribute if assigned previously to element */
}

/* Modify elements based on type and name attributes */
input[type="submit"] {
    display: block;
    width: 60%;
}

input[type="password"] {
    display: block;
    width: 60%;
}

.canvas {
    /* When element is greater than the container, it overflows. Use this attribute to adjust the container to the overflow */
    overflow: hidden; /* Gives the margin of nested elements something to push against without modifying the dimensions */
    filter: blur(2px); /* Blurs the elements */
    border-radius: 9px; /* Rounds edges */
    transform: rotate(-0.6deg); /* Rotate an element */
    box-sizing: border-box; /* Padding and border will be INCLUDED in the element width and height */
}

#gallery {
    display: flex;  /* Displays all elements inline in vertical or horizontal axis */
    flex-direction: row; /* Sets de direction of display. Availible are row, row-reverse, column, column-reverse */
    flex-wrap: wrap; /* Determines if elements continue in the next row/column when the container is too small. Availible are wrap and nowrap */
    justify-content: center; /* Determines how elements justify (like text) in the row/column they are placed */
    align-items: center; /* Positions the flex content along the cross axis. If flex-direction is row, then cross-axis is vertical */
    position: fixed;
    gap: 1rem; /* Gap between flex elements */
    position: sticky;
    top: 0;
}

#gallery img {
    object-fit: cover; /* Tells the image to FILL the containir without distorting */
    aspect-ratio: 34/5;
    width: max(50%, 300px); /* Sets the value to whichever is bigger */
}

/* @ Are queries. If the screen width is smaller than 800px, then the selectors inside are set */
@media(max-width: 800px){
    #gallery img {
         width: 50%
    }
}

.daily-value p:not(.no-divider) { /* Selects all the elements except the ones inside :not() */
    border-bottom: 1px solid #888989;
}

/* Target elements in list */
nav > ul {
	display: flex;
	flex-direction: row;
	justify-content: space-evenly;
}

/* Adds "Question #" before each p element */
p::before {
	content: "Question #"
}

nav > ul > li:hover {
	background-color: #dfdfe2;
	color: #1b1b32;
	cursor: pointer; /* Changes cursor from arrow to pointer */
}

* {
    scroll-behavior: smooth; /* Makes anchor jumping smoother */
  }


/* Selects every element which class includes sr-only */
span[class~="sr-only"] {
    border: 0;
}

/* Select all but a class */
span:not(.sr-only) {
    font-weight: normal;
  }

/* Importan attr makes sure its never unset */
  span[class~="sr-only"] {
    border: 0 !important;
    clip: rect(1px, 1px, 1px, 1px) !important;
    clip-path: inset(50%) !important;
    -webkit-clip-path: inset(50%) !important;
    height: 1px !important;
    width: 1px !important;
    position: absolute !important;
    overflow: hidden !important;
    white-space: nowrap !important;
    padding: 0 !important;
    margin: -1px !important;
  }

  table {
    border-collapse: collapse; /* Single border instead of one per cell */
    border: 0;
    position: relative;
  }

  /* Postion lets position elements inside container */
  table caption {
    color: #356eaf;
    font-size: 1.3em;
    font-weight: normal;
    position: absolute;
    top: -2.25rem;
    left: 0.5rem;
  }

  /* Targets all tr elements with ONLY total class */
  tr.total td {
    text-align: right;
    padding: 0 0.25rem;
  }

  /* Targets only the nth element element */
  tr.total td:nth-of-type(3) {
    padding-right: 0.5rem;
  }

  /* Align element vertically */
  tr.data td {
    vertical-align: top;
    text-align: right;
    padding: 0.3rem 0.25rem 0;
  }


/*---------------------------------------------------- POSITIONING -------------------------------------------------------*/
/* z-index creates layers on elements. top, right, left and bottom are used to position the element */
#back-wall {
    background-color: #8B4513;
    width: 100%;
    height: 60%;
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
  }
